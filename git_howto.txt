20170117

[Install for Windows]
1. 搜索 "git 安装"
2. 安装 msysgit 

[SSH GEN]
1. 右键git bash here
2. 命令行中输入 ssh-keygen -t rsa -C "xxxxxx@yy.com"
3. 把生成的id_rsa.pub中的内容复制到github/personal settings/SSH and GPG keys/New SSH key
[20180528]
ssh-keygen -t rsa -C "email@xx"
copy ~/.ssh/id_rsa.pub to github web ssh setting!!
// test ssh
ssh -T git@github.com

[git branch]
git branch 分支名                           // 创建分支
git checkout 分支名                         // 切换到某分支
git branch -d 分支名                        // 删除某分支
git branch                                  // 列出所有分支
git branch -a                               // 查看远程分支
git branch --merged/--no-merged             // 查看哪些分支已（未）并入当前分支
git checkout -b 分支名                      // 创建并切换到某分支
git merge 分支名                            // 把某分支合并到当前分支
// modify
git add xxx         // 把文件修改添加到暂存区
git commit xxx      // 把暂存区的所有内容提交到当前分支
git push            // 把当前分支修改提交到远程仓库
// diff
git diff            // 已修改，未暂存
git diff --cached   // 已暂存，未提交
git diff master origin/master   // 已提交未推送[20191012，经测试不好用]
// cancel
git checkout xxx    // 已修改，未暂存
git reset xx        // 把暂存文件恢复到未暂存状态
git reset --hard origin/master // 已提交，未推送
// merge
git co branch_1
git pull // update branch_1
git co master
git pull
git merge branch_1 // merge branch_1 to master
// conflict
gvim 111.v
gvim 222.v
git add 111.v 222.v
git ci -m "merge xxx" -i . // -i add the path to stage


远程分支表示法
远程仓库名/分支名

远程分支是本地分支push到服务器的时候产生的。

[git push]
git push 远程仓库名 本地分支：远程分支      // 把本地分支推送到远程分支
git push 远程仓库名 分支名                  // 简化版

git commit -m 'comment'                     // 不打开vi提交
git commit -m 'comment' -a                  // add + commit

AD: https://www.zhihu.com/question/19946553
SM: 每次修改可能包含多个功能，单个提交繁琐，全部提交只能全部恢复，如果修改包含多个功能，会带来不方便。加入add后，可以对每次提交做控制，一次修改可以按功能分多次提交，则以后恢复时，可以按功能点进行快照恢复，在复杂系统中，此功能非常必要和实用。

[git tag]
git log --oneline                           // 显示提交历史
git tag -a v1.01 -m "v1.01" 75a873d         // 为某提交版本75a873d打标签，-a是添加标签，-m是添加注释
git push origin -tags                       // 提交标签到远程仓库
git tag -d v1.01                            // 删除标签
git push origin :refs/tags/v1.01            // 删除远程标签
git tag                                     // 查看标签
git checkout [tagname]                      // 切换到标签
git show v0.1.2                             // 查看标签版本信息

20180511
checkout 远程非master分支
一键拉取本地上不存在的远程分支：git checkout -b new_branch origin/new_branch. 此外不要在一个问题提多个问题，特别是和题目无关的
//!!!!! 这个命令更好用！
$ git checkout -t origin/develop
//!!!!

20180510
问题描述
我们每次使用命令
git clone git@gitlab.xxx.com:xxxxx.git
默认 clone 的是这个仓库的 master 分支。如果最新的代码不在 master 分支上，该如何拿到呢？如下图所示，最新的代码可能在daily/1.4.1分支上，我们希望拿到这个分支上的代码。
解决方法
直接使用命令
git branch -r #查看远程分支 或
git branch -a #查看所有分支
会显示
origin/HEAD -> origin/master
origin/daily/1.2.2
origin/daily/1.3.0
origin/daily/1.4.1
origin/develop
origin/feature/daily-1.0.0
origin/master
然后直接
git checkout origin/daily/1.4.1
就好了。。。
git clone 默认会把远程仓库整个给clone下来; 
但只会在本地默认创建一个master分支
可以使用checkout命令来把远程分支取到本地
或者使用-t参数，它默认会在本地建立一个和远程分支名字一样的分支
折叠展开复制代码
$ git checkout -t origin/daily/1.4.1
也可以使用fetch来做：
$ git fetch origin python_mail.skin:python_mail.skin
不过通过fetch命令来建立的本地分支不是一个track branch，而且成功后不会自动切换到该分支上- z) t: R4 p- s6 _2 d3 a
注意：不要在本地采用如下方法：
$ git branch python_mail.skin
$ git checkout python_mail.skin
$ git pull origin python_mail.skin:python_mail.skin
因为，这样建立的branch是以master为基础建立的，再pull下来的话，会和master的内容进行合并，有可能会发生冲突... 

20191002
how to set ignore?
git config --global core.excludesfile ~/.gitignore_global

20191003
git add -A // add all modified, deleted and new created files
git add -u // add all modified and deleted files, exclude new created files!
git add . // add all modified and new created files, exclude deleted files!

20200307
create new file ~/.gitignore
*.swp

20211105
Merge Branch
    git co develop
    git pull
    git co dvlp_zpk
    git pull dvlp_zpk
    git co develop
    git merge dvlp_zpk

Resolve Conflict
    1) find conflict files
        both modified: xxx.c
        both added: xxx.c
    2) edit each file xxx.c
           <<<<<<<< HEAD
                your code
           ========
                others code
           >>>>>>>> branch_name
    3) git add
        git add xxx.c
        git add yyy.c
    4) git ci -a // must commit all when merge
        edit commit


